#!/usr/local/bin/python3

import subprocess, sys, os, re, argparse
from logging import getLogger
from os.path import isfile, isdir, abspath, normpath, dirname, join, basename

BLACKLIST = [
    b'BEGIN RSA PRIVATE KEY',
    b'BEGIN DSA PRIVATE KEY',
    b'BEGIN EC PRIVATE KEY',
    b'BEGIN OPENSSH PRIVATE KEY',
    b'BEGIN PRIVATE KEY',
    b'PuTTY-User-Key-File-2',
    b'BEGIN SSH2 ENCRYPTED PRIVATE KEY',
    b'BEGIN PGP PRIVATE KEY BLOCK',
]


def detect_private_key(argv=None):
    parser = argparse.ArgumentParser()
    parser.add_argument('filenames', nargs='*', help='Filenames to check')
    args = parser.parse_args(argv)

    private_key_files = []

    for filename in args.filenames:
        with open(filename, 'rb') as f:
            content = f.read()
            if any(line in content for line in BLACKLIST):
                private_key_files.append(filename)

    if private_key_files:
        for private_key_file in private_key_files:
            log.warning('Private key found: {}'.format(private_key_file))
            sys.exit(1)
    else:
        return 0

def main(file):
    log = getLogger(basename(__file__))
    # Now, do the checking:
    try:
        detect_private_key()
        log.info("No badness found")
        return 0

    except subprocess.CalledProcessError:
    	# There was a problem calling "git status".
    	log.info("Oops...")
    	return 12

if __name__ == '__main__':
    file = sys.argv[1]
    main(file)
