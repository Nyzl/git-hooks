#!/usr/local/bin/python3

# The maximum file-size for a file to be committed:
max_file_size = 512 # in KB (= 1024 byte)
# The path to the git-binary:
git_binary_path = "/usr/bin/git"


import subprocess, sys, os, re, argparse

BLACKLIST = [
    b'BEGIN RSA PRIVATE KEY',
    b'BEGIN DSA PRIVATE KEY',
    b'BEGIN EC PRIVATE KEY',
    b'BEGIN OPENSSH PRIVATE KEY',
    b'BEGIN PRIVATE KEY',
    b'PuTTY-User-Key-File-2',
    b'BEGIN SSH2 ENCRYPTED PRIVATE KEY',
    b'BEGIN PGP PRIVATE KEY BLOCK',
]


def sizeof_fmt(num):
    for x in ['bytes','KB','MB','GB','TB']:
        if num < 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0

def check_size(file):
    stat = os.stat(file)
    if stat.st_size > (max_file_size*1024):
        print("'"+file+"' is too huge to be commited!",
            "("+sizeof_fmt(stat.st_size)+")")
        sys.exit(1)

def detect_private_key(file):
    private_key_files = []

    with open(file, 'rb') as f:
        content = f.read()
        print(content)
        if any(line in content for line in BLACKLIST):
            private_key_files.append(file)

    if private_key_files:
        for private_key_file in private_key_files:
            print('Private key found: {}'.format(private_key_file))
        sys.exit(1)

# Now, do the checking:
try:
    print("Checking for files bigger then "+sizeof_fmt(max_file_size*1024))
    text = subprocess.check_output(
    [git_binary_path, "status", "--porcelain", "-uno"],
		stderr=subprocess.STDOUT).decode("utf-8")
    file_list = text.splitlines()

	# Check all files:
    for file in file_list:
        print(file[3:])
        check_size(file[3:])
        detect_private_key(file[3:])

    print("No badness found")
    sys.exit(0)


except subprocess.CalledProcessError:
	# There was a problem calling "git status".
	print("Oops...")
	sys.exit(12)

# regexs = {
#     "AWS Key" =< "['\\\"][a-z0-9\/+]{40}['\\\"]",
#     "Google Key" =< "['\\\"][a-z0-9_]{39}['\\\"]",
# }
